// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: communication.proto

#include "communication.pb.h"
#include "communication.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace communication {

static const char* RobotComm_method_names[] = {
  "/communication.RobotComm/GetBlood",
  "/communication.RobotComm/GetAmmunition",
  "/communication.RobotComm/GetPosture",
  "/communication.RobotComm/GetGunPosture",
  "/communication.RobotComm/GetVelocity",
  "/communication.RobotComm/GetAffected",
  "/communication.RobotComm/GetObjectDection",
  "/communication.RobotComm/PostBlood",
  "/communication.RobotComm/PostAmmunition",
  "/communication.RobotComm/PostDestination",
  "/communication.RobotComm/PostFrictionWheel",
  "/communication.RobotComm/PostStop",
  "/communication.RobotComm/PostBullet",
};

std::unique_ptr< RobotComm::Stub> RobotComm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotComm::Stub> stub(new RobotComm::Stub(channel, options));
  return stub;
}

RobotComm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBlood_(RobotComm_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAmmunition_(RobotComm_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosture_(RobotComm_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGunPosture_(RobotComm_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVelocity_(RobotComm_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAffected_(RobotComm_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectDection_(RobotComm_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostBlood_(RobotComm_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAmmunition_(RobotComm_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostDestination_(RobotComm_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostFrictionWheel_(RobotComm_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostStop_(RobotComm_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostBullet_(RobotComm_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotComm::Stub::GetBlood(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::Blood* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::Blood, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlood_, context, request, response);
}

void RobotComm::Stub::async::GetBlood(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Blood* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::Blood, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlood_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetBlood(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Blood* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlood_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Blood>* RobotComm::Stub::PrepareAsyncGetBloodRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Blood, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlood_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Blood>* RobotComm::Stub::AsyncGetBloodRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBloodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetAmmunition(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::Ammunition* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::Ammunition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAmmunition_, context, request, response);
}

void RobotComm::Stub::async::GetAmmunition(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Ammunition* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::Ammunition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAmmunition_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetAmmunition(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Ammunition* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAmmunition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Ammunition>* RobotComm::Stub::PrepareAsyncGetAmmunitionRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Ammunition, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAmmunition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Ammunition>* RobotComm::Stub::AsyncGetAmmunitionRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAmmunitionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetPosture(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::Posture* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::Posture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosture_, context, request, response);
}

void RobotComm::Stub::async::GetPosture(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Posture* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::Posture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosture_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetPosture(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Posture* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Posture>* RobotComm::Stub::PrepareAsyncGetPostureRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Posture, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Posture>* RobotComm::Stub::AsyncGetPostureRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPostureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetGunPosture(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::GunPosture* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::GunPosture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGunPosture_, context, request, response);
}

void RobotComm::Stub::async::GetGunPosture(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::GunPosture* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::GunPosture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGunPosture_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetGunPosture(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::GunPosture* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGunPosture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::GunPosture>* RobotComm::Stub::PrepareAsyncGetGunPostureRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::GunPosture, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGunPosture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::GunPosture>* RobotComm::Stub::AsyncGetGunPostureRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGunPostureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetVelocity(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::Velocity* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::Velocity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVelocity_, context, request, response);
}

void RobotComm::Stub::async::GetVelocity(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Velocity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::Velocity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVelocity_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetVelocity(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Velocity* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVelocity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Velocity>* RobotComm::Stub::PrepareAsyncGetVelocityRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Velocity, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVelocity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Velocity>* RobotComm::Stub::AsyncGetVelocityRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVelocityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetAffected(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::Affected* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::Affected, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAffected_, context, request, response);
}

void RobotComm::Stub::async::GetAffected(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Affected* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::Affected, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAffected_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetAffected(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::Affected* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAffected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Affected>* RobotComm::Stub::PrepareAsyncGetAffectedRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Affected, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAffected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Affected>* RobotComm::Stub::AsyncGetAffectedRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAffectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::GetObjectDection(::grpc::ClientContext* context, const ::communication::Request& request, ::communication::ObjectDection* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Request, ::communication::ObjectDection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObjectDection_, context, request, response);
}

void RobotComm::Stub::async::GetObjectDection(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::ObjectDection* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Request, ::communication::ObjectDection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectDection_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::GetObjectDection(::grpc::ClientContext* context, const ::communication::Request* request, ::communication::ObjectDection* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectDection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::ObjectDection>* RobotComm::Stub::PrepareAsyncGetObjectDectionRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::ObjectDection, ::communication::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObjectDection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::ObjectDection>* RobotComm::Stub::AsyncGetObjectDectionRaw(::grpc::ClientContext* context, const ::communication::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectDectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostBlood(::grpc::ClientContext* context, const ::communication::Blood& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Blood, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostBlood_, context, request, response);
}

void RobotComm::Stub::async::PostBlood(::grpc::ClientContext* context, const ::communication::Blood* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Blood, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostBlood_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostBlood(::grpc::ClientContext* context, const ::communication::Blood* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostBlood_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostBloodRaw(::grpc::ClientContext* context, const ::communication::Blood& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::Blood, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostBlood_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostBloodRaw(::grpc::ClientContext* context, const ::communication::Blood& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostBloodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostAmmunition(::grpc::ClientContext* context, const ::communication::Ammunition& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Ammunition, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostAmmunition_, context, request, response);
}

void RobotComm::Stub::async::PostAmmunition(::grpc::ClientContext* context, const ::communication::Ammunition* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Ammunition, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostAmmunition_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostAmmunition(::grpc::ClientContext* context, const ::communication::Ammunition* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostAmmunition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostAmmunitionRaw(::grpc::ClientContext* context, const ::communication::Ammunition& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::Ammunition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostAmmunition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostAmmunitionRaw(::grpc::ClientContext* context, const ::communication::Ammunition& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostAmmunitionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostDestination(::grpc::ClientContext* context, const ::communication::Destination& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Destination, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostDestination_, context, request, response);
}

void RobotComm::Stub::async::PostDestination(::grpc::ClientContext* context, const ::communication::Destination* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Destination, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostDestination_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostDestination(::grpc::ClientContext* context, const ::communication::Destination* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostDestination_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostDestinationRaw(::grpc::ClientContext* context, const ::communication::Destination& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::Destination, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostDestination_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostDestinationRaw(::grpc::ClientContext* context, const ::communication::Destination& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostDestinationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostFrictionWheel(::grpc::ClientContext* context, const ::communication::FrictionWheel& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::FrictionWheel, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostFrictionWheel_, context, request, response);
}

void RobotComm::Stub::async::PostFrictionWheel(::grpc::ClientContext* context, const ::communication::FrictionWheel* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::FrictionWheel, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostFrictionWheel_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostFrictionWheel(::grpc::ClientContext* context, const ::communication::FrictionWheel* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostFrictionWheel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostFrictionWheelRaw(::grpc::ClientContext* context, const ::communication::FrictionWheel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::FrictionWheel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostFrictionWheel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostFrictionWheelRaw(::grpc::ClientContext* context, const ::communication::FrictionWheel& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostFrictionWheelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostStop(::grpc::ClientContext* context, const ::communication::Stop& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Stop, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostStop_, context, request, response);
}

void RobotComm::Stub::async::PostStop(::grpc::ClientContext* context, const ::communication::Stop* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Stop, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostStop_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostStop(::grpc::ClientContext* context, const ::communication::Stop* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostStopRaw(::grpc::ClientContext* context, const ::communication::Stop& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::Stop, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostStopRaw(::grpc::ClientContext* context, const ::communication::Stop& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotComm::Stub::PostBullet(::grpc::ClientContext* context, const ::communication::Bullet& request, ::communication::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::communication::Bullet, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostBullet_, context, request, response);
}

void RobotComm::Stub::async::PostBullet(::grpc::ClientContext* context, const ::communication::Bullet* request, ::communication::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::communication::Bullet, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostBullet_, context, request, response, std::move(f));
}

void RobotComm::Stub::async::PostBullet(::grpc::ClientContext* context, const ::communication::Bullet* request, ::communication::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostBullet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::PrepareAsyncPostBulletRaw(::grpc::ClientContext* context, const ::communication::Bullet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::communication::Response, ::communication::Bullet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostBullet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::communication::Response>* RobotComm::Stub::AsyncPostBulletRaw(::grpc::ClientContext* context, const ::communication::Bullet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostBulletRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotComm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::Blood, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::Blood* resp) {
               return service->GetBlood(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::Ammunition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::Ammunition* resp) {
               return service->GetAmmunition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::Posture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::Posture* resp) {
               return service->GetPosture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::GunPosture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::GunPosture* resp) {
               return service->GetGunPosture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::Velocity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::Velocity* resp) {
               return service->GetVelocity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::Affected, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::Affected* resp) {
               return service->GetAffected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Request, ::communication::ObjectDection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Request* req,
             ::communication::ObjectDection* resp) {
               return service->GetObjectDection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Blood, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Blood* req,
             ::communication::Response* resp) {
               return service->PostBlood(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Ammunition, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Ammunition* req,
             ::communication::Response* resp) {
               return service->PostAmmunition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Destination, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Destination* req,
             ::communication::Response* resp) {
               return service->PostDestination(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::FrictionWheel, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::FrictionWheel* req,
             ::communication::Response* resp) {
               return service->PostFrictionWheel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Stop, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Stop* req,
             ::communication::Response* resp) {
               return service->PostStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotComm_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotComm::Service, ::communication::Bullet, ::communication::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::communication::Bullet* req,
             ::communication::Response* resp) {
               return service->PostBullet(ctx, req, resp);
             }, this)));
}

RobotComm::Service::~Service() {
}

::grpc::Status RobotComm::Service::GetBlood(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::Blood* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetAmmunition(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::Ammunition* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetPosture(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::Posture* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetGunPosture(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::GunPosture* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetVelocity(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::Velocity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetAffected(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::Affected* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::GetObjectDection(::grpc::ServerContext* context, const ::communication::Request* request, ::communication::ObjectDection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostBlood(::grpc::ServerContext* context, const ::communication::Blood* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostAmmunition(::grpc::ServerContext* context, const ::communication::Ammunition* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostDestination(::grpc::ServerContext* context, const ::communication::Destination* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostFrictionWheel(::grpc::ServerContext* context, const ::communication::FrictionWheel* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostStop(::grpc::ServerContext* context, const ::communication::Stop* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotComm::Service::PostBullet(::grpc::ServerContext* context, const ::communication::Bullet* request, ::communication::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace communication

