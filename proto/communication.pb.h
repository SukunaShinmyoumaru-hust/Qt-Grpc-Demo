// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_communication_2eproto_metadata_getter(int index);
namespace communication {
class Attacked;
struct AttackedDefaultTypeInternal;
extern AttackedDefaultTypeInternal _Attacked_default_instance_;
class Blood;
struct BloodDefaultTypeInternal;
extern BloodDefaultTypeInternal _Blood_default_instance_;
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class ChassisStop;
struct ChassisStopDefaultTypeInternal;
extern ChassisStopDefaultTypeInternal _ChassisStop_default_instance_;
class CommonRequest;
struct CommonRequestDefaultTypeInternal;
extern CommonRequestDefaultTypeInternal _CommonRequest_default_instance_;
class Destination;
struct DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class FricWheel;
struct FricWheelDefaultTypeInternal;
extern FricWheelDefaultTypeInternal _FricWheel_default_instance_;
class GimbalYaw;
struct GimbalYawDefaultTypeInternal;
extern GimbalYawDefaultTypeInternal _GimbalYaw_default_instance_;
class ObjectDection;
struct ObjectDectionDefaultTypeInternal;
extern ObjectDectionDefaultTypeInternal _ObjectDection_default_instance_;
class Posture;
struct PostureDefaultTypeInternal;
extern PostureDefaultTypeInternal _Posture_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Shooter;
struct ShooterDefaultTypeInternal;
extern ShooterDefaultTypeInternal _Shooter_default_instance_;
class Velocity;
struct VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> ::communication::Attacked* Arena::CreateMaybeMessage<::communication::Attacked>(Arena*);
template<> ::communication::Blood* Arena::CreateMaybeMessage<::communication::Blood>(Arena*);
template<> ::communication::Bullet* Arena::CreateMaybeMessage<::communication::Bullet>(Arena*);
template<> ::communication::ChassisStop* Arena::CreateMaybeMessage<::communication::ChassisStop>(Arena*);
template<> ::communication::CommonRequest* Arena::CreateMaybeMessage<::communication::CommonRequest>(Arena*);
template<> ::communication::Destination* Arena::CreateMaybeMessage<::communication::Destination>(Arena*);
template<> ::communication::FricWheel* Arena::CreateMaybeMessage<::communication::FricWheel>(Arena*);
template<> ::communication::GimbalYaw* Arena::CreateMaybeMessage<::communication::GimbalYaw>(Arena*);
template<> ::communication::ObjectDection* Arena::CreateMaybeMessage<::communication::ObjectDection>(Arena*);
template<> ::communication::Posture* Arena::CreateMaybeMessage<::communication::Posture>(Arena*);
template<> ::communication::Response* Arena::CreateMaybeMessage<::communication::Response>(Arena*);
template<> ::communication::Shooter* Arena::CreateMaybeMessage<::communication::Shooter>(Arena*);
template<> ::communication::Velocity* Arena::CreateMaybeMessage<::communication::Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace communication {

// ===================================================================

class Blood PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Blood) */ {
 public:
  inline Blood() : Blood(nullptr) {}
  virtual ~Blood();
  explicit constexpr Blood(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blood(const Blood& from);
  Blood(Blood&& from) noexcept
    : Blood() {
    *this = ::std::move(from);
  }

  inline Blood& operator=(const Blood& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blood& operator=(Blood&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blood& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blood* internal_default_instance() {
    return reinterpret_cast<const Blood*>(
               &_Blood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Blood& a, Blood& b) {
    a.Swap(&b);
  }
  inline void Swap(Blood* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blood* New() const final {
    return CreateMaybeMessage<Blood>(nullptr);
  }

  Blood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blood>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blood& from);
  void MergeFrom(const Blood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blood* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Blood";
  }
  protected:
  explicit Blood(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kBloodFieldNumber = 1,
  };
  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int32 blood = 1;
  void clear_blood();
  ::PROTOBUF_NAMESPACE_ID::int32 blood() const;
  void set_blood(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blood() const;
  void _internal_set_blood(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Blood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::int32 blood_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class CommonRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.CommonRequest) */ {
 public:
  inline CommonRequest() : CommonRequest(nullptr) {}
  virtual ~CommonRequest();
  explicit constexpr CommonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonRequest(const CommonRequest& from);
  CommonRequest(CommonRequest&& from) noexcept
    : CommonRequest() {
    *this = ::std::move(from);
  }

  inline CommonRequest& operator=(const CommonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRequest& operator=(CommonRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonRequest* internal_default_instance() {
    return reinterpret_cast<const CommonRequest*>(
               &_CommonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonRequest& a, CommonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRequest* New() const final {
    return CreateMaybeMessage<CommonRequest>(nullptr);
  }

  CommonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRequest& from);
  void MergeFrom(const CommonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.CommonRequest";
  }
  protected:
  explicit CommonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.CommonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Bullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  virtual ~Bullet();
  explicit constexpr Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(nullptr);
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBulletsFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // int32 bullets = 1;
  void clear_bullets();
  ::PROTOBUF_NAMESPACE_ID::int32 bullets() const;
  void set_bullets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bullets() const;
  void _internal_set_bullets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Bullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bullets_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Posture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Posture) */ {
 public:
  inline Posture() : Posture(nullptr) {}
  virtual ~Posture();
  explicit constexpr Posture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Posture(const Posture& from);
  Posture(Posture&& from) noexcept
    : Posture() {
    *this = ::std::move(from);
  }

  inline Posture& operator=(const Posture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Posture& operator=(Posture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Posture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Posture* internal_default_instance() {
    return reinterpret_cast<const Posture*>(
               &_Posture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Posture& a, Posture& b) {
    a.Swap(&b);
  }
  inline void Swap(Posture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Posture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Posture* New() const final {
    return CreateMaybeMessage<Posture>(nullptr);
  }

  Posture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Posture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Posture& from);
  void MergeFrom(const Posture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Posture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Posture";
  }
  protected:
  explicit Posture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kTimeFieldNumber = 4,
    kRadianFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // float radian = 3;
  void clear_radian();
  float radian() const;
  void set_radian(float value);
  private:
  float _internal_radian() const;
  void _internal_set_radian(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Posture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  double time_;
  float radian_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class GimbalYaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.GimbalYaw) */ {
 public:
  inline GimbalYaw() : GimbalYaw(nullptr) {}
  virtual ~GimbalYaw();
  explicit constexpr GimbalYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalYaw(const GimbalYaw& from);
  GimbalYaw(GimbalYaw&& from) noexcept
    : GimbalYaw() {
    *this = ::std::move(from);
  }

  inline GimbalYaw& operator=(const GimbalYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalYaw& operator=(GimbalYaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GimbalYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalYaw* internal_default_instance() {
    return reinterpret_cast<const GimbalYaw*>(
               &_GimbalYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GimbalYaw& a, GimbalYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalYaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GimbalYaw* New() const final {
    return CreateMaybeMessage<GimbalYaw>(nullptr);
  }

  GimbalYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GimbalYaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GimbalYaw& from);
  void MergeFrom(const GimbalYaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalYaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.GimbalYaw";
  }
  protected:
  explicit GimbalYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // float yaw = 1;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.GimbalYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float yaw_;
  float pitch_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Velocity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Velocity) */ {
 public:
  inline Velocity() : Velocity(nullptr) {}
  virtual ~Velocity();
  explicit constexpr Velocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Velocity";
  }
  protected:
  explicit Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityLinearXFieldNumber = 1,
    kVelocityLinearYFieldNumber = 2,
    kTimeFieldNumber = 4,
    kVelocityAngularZFieldNumber = 3,
  };
  // float velocity_linear_x = 1;
  void clear_velocity_linear_x();
  float velocity_linear_x() const;
  void set_velocity_linear_x(float value);
  private:
  float _internal_velocity_linear_x() const;
  void _internal_set_velocity_linear_x(float value);
  public:

  // float velocity_linear_y = 2;
  void clear_velocity_linear_y();
  float velocity_linear_y() const;
  void set_velocity_linear_y(float value);
  private:
  float _internal_velocity_linear_y() const;
  void _internal_set_velocity_linear_y(float value);
  public:

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // float velocity_angular_z = 3;
  void clear_velocity_angular_z();
  float velocity_angular_z() const;
  void set_velocity_angular_z(float value);
  private:
  float _internal_velocity_angular_z() const;
  void _internal_set_velocity_angular_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float velocity_linear_x_;
  float velocity_linear_y_;
  double time_;
  float velocity_angular_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Attacked PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Attacked) */ {
 public:
  inline Attacked() : Attacked(nullptr) {}
  virtual ~Attacked();
  explicit constexpr Attacked(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attacked(const Attacked& from);
  Attacked(Attacked&& from) noexcept
    : Attacked() {
    *this = ::std::move(from);
  }

  inline Attacked& operator=(const Attacked& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attacked& operator=(Attacked&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attacked& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attacked* internal_default_instance() {
    return reinterpret_cast<const Attacked*>(
               &_Attacked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Attacked& a, Attacked& b) {
    a.Swap(&b);
  }
  inline void Swap(Attacked* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attacked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attacked* New() const final {
    return CreateMaybeMessage<Attacked>(nullptr);
  }

  Attacked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attacked>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attacked& from);
  void MergeFrom(const Attacked& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attacked* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Attacked";
  }
  protected:
  explicit Attacked(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // int32 up = 1;
  void clear_up();
  ::PROTOBUF_NAMESPACE_ID::int32 up() const;
  void set_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up() const;
  void _internal_set_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down = 2;
  void clear_down();
  ::PROTOBUF_NAMESPACE_ID::int32 down() const;
  void set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down() const;
  void _internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left = 3;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right = 4;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double time = 5;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Attacked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ObjectDection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.ObjectDection) */ {
 public:
  inline ObjectDection() : ObjectDection(nullptr) {}
  virtual ~ObjectDection();
  explicit constexpr ObjectDection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDection(const ObjectDection& from);
  ObjectDection(ObjectDection&& from) noexcept
    : ObjectDection() {
    *this = ::std::move(from);
  }

  inline ObjectDection& operator=(const ObjectDection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDection& operator=(ObjectDection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDection* internal_default_instance() {
    return reinterpret_cast<const ObjectDection*>(
               &_ObjectDection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectDection& a, ObjectDection& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectDection* New() const final {
    return CreateMaybeMessage<ObjectDection>(nullptr);
  }

  ObjectDection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDection& from);
  void MergeFrom(const ObjectDection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.ObjectDection";
  }
  protected:
  explicit ObjectDection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // repeated float x1 = 1;
  int x1_size() const;
  private:
  int _internal_x1_size() const;
  public:
  void clear_x1();
  private:
  float _internal_x1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x1() const;
  void _internal_add_x1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x1();
  public:
  float x1(int index) const;
  void set_x1(int index, float value);
  void add_x1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x1();

  // repeated float y1 = 2;
  int y1_size() const;
  private:
  int _internal_y1_size() const;
  public:
  void clear_y1();
  private:
  float _internal_y1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y1() const;
  void _internal_add_y1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y1();
  public:
  float y1(int index) const;
  void set_y1(int index, float value);
  void add_y1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y1();

  // repeated float x2 = 3;
  int x2_size() const;
  private:
  int _internal_x2_size() const;
  public:
  void clear_x2();
  private:
  float _internal_x2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x2() const;
  void _internal_add_x2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x2();
  public:
  float x2(int index) const;
  void set_x2(int index, float value);
  void add_x2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x2();

  // repeated float y2 = 4;
  int y2_size() const;
  private:
  int _internal_y2_size() const;
  public:
  void clear_y2();
  private:
  float _internal_y2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y2() const;
  void _internal_add_y2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y2();
  public:
  float y2(int index) const;
  void set_y2(int index, float value);
  void add_y2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y2();

  // double time = 5;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.ObjectDection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x1_;
  mutable std::atomic<int> _x1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y1_;
  mutable std::atomic<int> _y1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x2_;
  mutable std::atomic<int> _x2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y2_;
  mutable std::atomic<int> _y2_cached_byte_size_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Destination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Destination) */ {
 public:
  inline Destination() : Destination(nullptr) {}
  virtual ~Destination();
  explicit constexpr Destination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Destination(const Destination& from);
  Destination(Destination&& from) noexcept
    : Destination() {
    *this = ::std::move(from);
  }

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Destination& operator=(Destination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Destination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
               &_Destination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Destination& a, Destination& b) {
    a.Swap(&b);
  }
  inline void Swap(Destination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Destination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Destination* New() const final {
    return CreateMaybeMessage<Destination>(nullptr);
  }

  Destination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Destination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Destination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Destination";
  }
  protected:
  explicit Destination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kTimeFieldNumber = 4,
    kYawFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Destination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  double time_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class FricWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.FricWheel) */ {
 public:
  inline FricWheel() : FricWheel(nullptr) {}
  virtual ~FricWheel();
  explicit constexpr FricWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FricWheel(const FricWheel& from);
  FricWheel(FricWheel&& from) noexcept
    : FricWheel() {
    *this = ::std::move(from);
  }

  inline FricWheel& operator=(const FricWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FricWheel& operator=(FricWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FricWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FricWheel* internal_default_instance() {
    return reinterpret_cast<const FricWheel*>(
               &_FricWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FricWheel& a, FricWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(FricWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FricWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FricWheel* New() const final {
    return CreateMaybeMessage<FricWheel>(nullptr);
  }

  FricWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FricWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FricWheel& from);
  void MergeFrom(const FricWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FricWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.FricWheel";
  }
  protected:
  explicit FricWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kOpenFieldNumber = 1,
  };
  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:communication.FricWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ChassisStop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.ChassisStop) */ {
 public:
  inline ChassisStop() : ChassisStop(nullptr) {}
  virtual ~ChassisStop();
  explicit constexpr ChassisStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChassisStop(const ChassisStop& from);
  ChassisStop(ChassisStop&& from) noexcept
    : ChassisStop() {
    *this = ::std::move(from);
  }

  inline ChassisStop& operator=(const ChassisStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisStop& operator=(ChassisStop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChassisStop* internal_default_instance() {
    return reinterpret_cast<const ChassisStop*>(
               &_ChassisStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChassisStop& a, ChassisStop& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisStop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChassisStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisStop* New() const final {
    return CreateMaybeMessage<ChassisStop>(nullptr);
  }

  ChassisStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisStop& from);
  void MergeFrom(const ChassisStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.ChassisStop";
  }
  protected:
  explicit ChassisStop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:communication.ChassisStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Shooter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Shooter) */ {
 public:
  inline Shooter() : Shooter(nullptr) {}
  virtual ~Shooter();
  explicit constexpr Shooter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Shooter(const Shooter& from);
  Shooter(Shooter&& from) noexcept
    : Shooter() {
    *this = ::std::move(from);
  }

  inline Shooter& operator=(const Shooter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shooter& operator=(Shooter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shooter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Shooter* internal_default_instance() {
    return reinterpret_cast<const Shooter*>(
               &_Shooter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Shooter& a, Shooter& b) {
    a.Swap(&b);
  }
  inline void Swap(Shooter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shooter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shooter* New() const final {
    return CreateMaybeMessage<Shooter>(nullptr);
  }

  Shooter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shooter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shooter& from);
  void MergeFrom(const Shooter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shooter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Shooter";
  }
  protected:
  explicit Shooter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kOpenFieldNumber = 1,
  };
  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // bool open = 1;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Shooter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Blood

// int32 blood = 1;
inline void Blood::clear_blood() {
  blood_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blood::_internal_blood() const {
  return blood_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blood::blood() const {
  // @@protoc_insertion_point(field_get:communication.Blood.blood)
  return _internal_blood();
}
inline void Blood::_internal_set_blood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blood_ = value;
}
inline void Blood::set_blood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blood(value);
  // @@protoc_insertion_point(field_set:communication.Blood.blood)
}

// double time = 2;
inline void Blood::clear_time() {
  time_ = 0;
}
inline double Blood::_internal_time() const {
  return time_;
}
inline double Blood::time() const {
  // @@protoc_insertion_point(field_get:communication.Blood.time)
  return _internal_time();
}
inline void Blood::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Blood::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Blood.time)
}

// -------------------------------------------------------------------

// CommonRequest

// double time = 1;
inline void CommonRequest::clear_time() {
  time_ = 0;
}
inline double CommonRequest::_internal_time() const {
  return time_;
}
inline double CommonRequest::time() const {
  // @@protoc_insertion_point(field_get:communication.CommonRequest.time)
  return _internal_time();
}
inline void CommonRequest::_internal_set_time(double value) {
  
  time_ = value;
}
inline void CommonRequest::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.CommonRequest.time)
}

// -------------------------------------------------------------------

// Bullet

// int32 bullets = 1;
inline void Bullet::clear_bullets() {
  bullets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_bullets() const {
  return bullets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::bullets() const {
  // @@protoc_insertion_point(field_get:communication.Bullet.bullets)
  return _internal_bullets();
}
inline void Bullet::_internal_set_bullets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bullets_ = value;
}
inline void Bullet::set_bullets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bullets(value);
  // @@protoc_insertion_point(field_set:communication.Bullet.bullets)
}

// int32 type = 2;
inline void Bullet::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::type() const {
  // @@protoc_insertion_point(field_get:communication.Bullet.type)
  return _internal_type();
}
inline void Bullet::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Bullet::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:communication.Bullet.type)
}

// double time = 3;
inline void Bullet::clear_time() {
  time_ = 0;
}
inline double Bullet::_internal_time() const {
  return time_;
}
inline double Bullet::time() const {
  // @@protoc_insertion_point(field_get:communication.Bullet.time)
  return _internal_time();
}
inline void Bullet::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Bullet::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Bullet.time)
}

// -------------------------------------------------------------------

// Posture

// float x = 1;
inline void Posture::clear_x() {
  x_ = 0;
}
inline float Posture::_internal_x() const {
  return x_;
}
inline float Posture::x() const {
  // @@protoc_insertion_point(field_get:communication.Posture.x)
  return _internal_x();
}
inline void Posture::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Posture::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:communication.Posture.x)
}

// float y = 2;
inline void Posture::clear_y() {
  y_ = 0;
}
inline float Posture::_internal_y() const {
  return y_;
}
inline float Posture::y() const {
  // @@protoc_insertion_point(field_get:communication.Posture.y)
  return _internal_y();
}
inline void Posture::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Posture::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:communication.Posture.y)
}

// float radian = 3;
inline void Posture::clear_radian() {
  radian_ = 0;
}
inline float Posture::_internal_radian() const {
  return radian_;
}
inline float Posture::radian() const {
  // @@protoc_insertion_point(field_get:communication.Posture.radian)
  return _internal_radian();
}
inline void Posture::_internal_set_radian(float value) {
  
  radian_ = value;
}
inline void Posture::set_radian(float value) {
  _internal_set_radian(value);
  // @@protoc_insertion_point(field_set:communication.Posture.radian)
}

// double time = 4;
inline void Posture::clear_time() {
  time_ = 0;
}
inline double Posture::_internal_time() const {
  return time_;
}
inline double Posture::time() const {
  // @@protoc_insertion_point(field_get:communication.Posture.time)
  return _internal_time();
}
inline void Posture::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Posture::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Posture.time)
}

// -------------------------------------------------------------------

// GimbalYaw

// float yaw = 1;
inline void GimbalYaw::clear_yaw() {
  yaw_ = 0;
}
inline float GimbalYaw::_internal_yaw() const {
  return yaw_;
}
inline float GimbalYaw::yaw() const {
  // @@protoc_insertion_point(field_get:communication.GimbalYaw.yaw)
  return _internal_yaw();
}
inline void GimbalYaw::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void GimbalYaw::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:communication.GimbalYaw.yaw)
}

// float pitch = 2;
inline void GimbalYaw::clear_pitch() {
  pitch_ = 0;
}
inline float GimbalYaw::_internal_pitch() const {
  return pitch_;
}
inline float GimbalYaw::pitch() const {
  // @@protoc_insertion_point(field_get:communication.GimbalYaw.pitch)
  return _internal_pitch();
}
inline void GimbalYaw::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void GimbalYaw::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:communication.GimbalYaw.pitch)
}

// double time = 3;
inline void GimbalYaw::clear_time() {
  time_ = 0;
}
inline double GimbalYaw::_internal_time() const {
  return time_;
}
inline double GimbalYaw::time() const {
  // @@protoc_insertion_point(field_get:communication.GimbalYaw.time)
  return _internal_time();
}
inline void GimbalYaw::_internal_set_time(double value) {
  
  time_ = value;
}
inline void GimbalYaw::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.GimbalYaw.time)
}

// -------------------------------------------------------------------

// Velocity

// float velocity_linear_x = 1;
inline void Velocity::clear_velocity_linear_x() {
  velocity_linear_x_ = 0;
}
inline float Velocity::_internal_velocity_linear_x() const {
  return velocity_linear_x_;
}
inline float Velocity::velocity_linear_x() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.velocity_linear_x)
  return _internal_velocity_linear_x();
}
inline void Velocity::_internal_set_velocity_linear_x(float value) {
  
  velocity_linear_x_ = value;
}
inline void Velocity::set_velocity_linear_x(float value) {
  _internal_set_velocity_linear_x(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.velocity_linear_x)
}

// float velocity_linear_y = 2;
inline void Velocity::clear_velocity_linear_y() {
  velocity_linear_y_ = 0;
}
inline float Velocity::_internal_velocity_linear_y() const {
  return velocity_linear_y_;
}
inline float Velocity::velocity_linear_y() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.velocity_linear_y)
  return _internal_velocity_linear_y();
}
inline void Velocity::_internal_set_velocity_linear_y(float value) {
  
  velocity_linear_y_ = value;
}
inline void Velocity::set_velocity_linear_y(float value) {
  _internal_set_velocity_linear_y(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.velocity_linear_y)
}

// float velocity_angular_z = 3;
inline void Velocity::clear_velocity_angular_z() {
  velocity_angular_z_ = 0;
}
inline float Velocity::_internal_velocity_angular_z() const {
  return velocity_angular_z_;
}
inline float Velocity::velocity_angular_z() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.velocity_angular_z)
  return _internal_velocity_angular_z();
}
inline void Velocity::_internal_set_velocity_angular_z(float value) {
  
  velocity_angular_z_ = value;
}
inline void Velocity::set_velocity_angular_z(float value) {
  _internal_set_velocity_angular_z(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.velocity_angular_z)
}

// double time = 4;
inline void Velocity::clear_time() {
  time_ = 0;
}
inline double Velocity::_internal_time() const {
  return time_;
}
inline double Velocity::time() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.time)
  return _internal_time();
}
inline void Velocity::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Velocity::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.time)
}

// -------------------------------------------------------------------

// Attacked

// int32 up = 1;
inline void Attacked::clear_up() {
  up_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::_internal_up() const {
  return up_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::up() const {
  // @@protoc_insertion_point(field_get:communication.Attacked.up)
  return _internal_up();
}
inline void Attacked::_internal_set_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_ = value;
}
inline void Attacked::set_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:communication.Attacked.up)
}

// int32 down = 2;
inline void Attacked::clear_down() {
  down_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::_internal_down() const {
  return down_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::down() const {
  // @@protoc_insertion_point(field_get:communication.Attacked.down)
  return _internal_down();
}
inline void Attacked::_internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_ = value;
}
inline void Attacked::set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:communication.Attacked.down)
}

// int32 left = 3;
inline void Attacked::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::left() const {
  // @@protoc_insertion_point(field_get:communication.Attacked.left)
  return _internal_left();
}
inline void Attacked::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
}
inline void Attacked::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:communication.Attacked.left)
}

// int32 right = 4;
inline void Attacked::clear_right() {
  right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attacked::right() const {
  // @@protoc_insertion_point(field_get:communication.Attacked.right)
  return _internal_right();
}
inline void Attacked::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_ = value;
}
inline void Attacked::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:communication.Attacked.right)
}

// double time = 5;
inline void Attacked::clear_time() {
  time_ = 0;
}
inline double Attacked::_internal_time() const {
  return time_;
}
inline double Attacked::time() const {
  // @@protoc_insertion_point(field_get:communication.Attacked.time)
  return _internal_time();
}
inline void Attacked::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Attacked::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Attacked.time)
}

// -------------------------------------------------------------------

// ObjectDection

// repeated float x1 = 1;
inline int ObjectDection::_internal_x1_size() const {
  return x1_.size();
}
inline int ObjectDection::x1_size() const {
  return _internal_x1_size();
}
inline void ObjectDection::clear_x1() {
  x1_.Clear();
}
inline float ObjectDection::_internal_x1(int index) const {
  return x1_.Get(index);
}
inline float ObjectDection::x1(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.x1)
  return _internal_x1(index);
}
inline void ObjectDection::set_x1(int index, float value) {
  x1_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.x1)
}
inline void ObjectDection::_internal_add_x1(float value) {
  x1_.Add(value);
}
inline void ObjectDection::add_x1(float value) {
  _internal_add_x1(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.x1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_x1() const {
  return x1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::x1() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.x1)
  return _internal_x1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_x1() {
  return &x1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_x1() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.x1)
  return _internal_mutable_x1();
}

// repeated float y1 = 2;
inline int ObjectDection::_internal_y1_size() const {
  return y1_.size();
}
inline int ObjectDection::y1_size() const {
  return _internal_y1_size();
}
inline void ObjectDection::clear_y1() {
  y1_.Clear();
}
inline float ObjectDection::_internal_y1(int index) const {
  return y1_.Get(index);
}
inline float ObjectDection::y1(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.y1)
  return _internal_y1(index);
}
inline void ObjectDection::set_y1(int index, float value) {
  y1_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.y1)
}
inline void ObjectDection::_internal_add_y1(float value) {
  y1_.Add(value);
}
inline void ObjectDection::add_y1(float value) {
  _internal_add_y1(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.y1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_y1() const {
  return y1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::y1() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.y1)
  return _internal_y1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_y1() {
  return &y1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_y1() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.y1)
  return _internal_mutable_y1();
}

// repeated float x2 = 3;
inline int ObjectDection::_internal_x2_size() const {
  return x2_.size();
}
inline int ObjectDection::x2_size() const {
  return _internal_x2_size();
}
inline void ObjectDection::clear_x2() {
  x2_.Clear();
}
inline float ObjectDection::_internal_x2(int index) const {
  return x2_.Get(index);
}
inline float ObjectDection::x2(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.x2)
  return _internal_x2(index);
}
inline void ObjectDection::set_x2(int index, float value) {
  x2_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.x2)
}
inline void ObjectDection::_internal_add_x2(float value) {
  x2_.Add(value);
}
inline void ObjectDection::add_x2(float value) {
  _internal_add_x2(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.x2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_x2() const {
  return x2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::x2() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.x2)
  return _internal_x2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_x2() {
  return &x2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_x2() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.x2)
  return _internal_mutable_x2();
}

// repeated float y2 = 4;
inline int ObjectDection::_internal_y2_size() const {
  return y2_.size();
}
inline int ObjectDection::y2_size() const {
  return _internal_y2_size();
}
inline void ObjectDection::clear_y2() {
  y2_.Clear();
}
inline float ObjectDection::_internal_y2(int index) const {
  return y2_.Get(index);
}
inline float ObjectDection::y2(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.y2)
  return _internal_y2(index);
}
inline void ObjectDection::set_y2(int index, float value) {
  y2_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.y2)
}
inline void ObjectDection::_internal_add_y2(float value) {
  y2_.Add(value);
}
inline void ObjectDection::add_y2(float value) {
  _internal_add_y2(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.y2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_y2() const {
  return y2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::y2() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.y2)
  return _internal_y2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_y2() {
  return &y2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_y2() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.y2)
  return _internal_mutable_y2();
}

// double time = 5;
inline void ObjectDection::clear_time() {
  time_ = 0;
}
inline double ObjectDection::_internal_time() const {
  return time_;
}
inline double ObjectDection::time() const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.time)
  return _internal_time();
}
inline void ObjectDection::_internal_set_time(double value) {
  
  time_ = value;
}
inline void ObjectDection::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.time)
}

// -------------------------------------------------------------------

// Response

// double time = 1;
inline void Response::clear_time() {
  time_ = 0;
}
inline double Response::_internal_time() const {
  return time_;
}
inline double Response::time() const {
  // @@protoc_insertion_point(field_get:communication.Response.time)
  return _internal_time();
}
inline void Response::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Response::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Response.time)
}

// -------------------------------------------------------------------

// Destination

// float x = 1;
inline void Destination::clear_x() {
  x_ = 0;
}
inline float Destination::_internal_x() const {
  return x_;
}
inline float Destination::x() const {
  // @@protoc_insertion_point(field_get:communication.Destination.x)
  return _internal_x();
}
inline void Destination::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Destination::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:communication.Destination.x)
}

// float y = 2;
inline void Destination::clear_y() {
  y_ = 0;
}
inline float Destination::_internal_y() const {
  return y_;
}
inline float Destination::y() const {
  // @@protoc_insertion_point(field_get:communication.Destination.y)
  return _internal_y();
}
inline void Destination::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Destination::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:communication.Destination.y)
}

// float yaw = 3;
inline void Destination::clear_yaw() {
  yaw_ = 0;
}
inline float Destination::_internal_yaw() const {
  return yaw_;
}
inline float Destination::yaw() const {
  // @@protoc_insertion_point(field_get:communication.Destination.yaw)
  return _internal_yaw();
}
inline void Destination::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Destination::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:communication.Destination.yaw)
}

// double time = 4;
inline void Destination::clear_time() {
  time_ = 0;
}
inline double Destination::_internal_time() const {
  return time_;
}
inline double Destination::time() const {
  // @@protoc_insertion_point(field_get:communication.Destination.time)
  return _internal_time();
}
inline void Destination::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Destination::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Destination.time)
}

// -------------------------------------------------------------------

// FricWheel

// bool open = 1;
inline void FricWheel::clear_open() {
  open_ = false;
}
inline bool FricWheel::_internal_open() const {
  return open_;
}
inline bool FricWheel::open() const {
  // @@protoc_insertion_point(field_get:communication.FricWheel.open)
  return _internal_open();
}
inline void FricWheel::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void FricWheel::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:communication.FricWheel.open)
}

// double time = 2;
inline void FricWheel::clear_time() {
  time_ = 0;
}
inline double FricWheel::_internal_time() const {
  return time_;
}
inline double FricWheel::time() const {
  // @@protoc_insertion_point(field_get:communication.FricWheel.time)
  return _internal_time();
}
inline void FricWheel::_internal_set_time(double value) {
  
  time_ = value;
}
inline void FricWheel::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.FricWheel.time)
}

// -------------------------------------------------------------------

// ChassisStop

// bool flag = 1;
inline void ChassisStop::clear_flag() {
  flag_ = false;
}
inline bool ChassisStop::_internal_flag() const {
  return flag_;
}
inline bool ChassisStop::flag() const {
  // @@protoc_insertion_point(field_get:communication.ChassisStop.flag)
  return _internal_flag();
}
inline void ChassisStop::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void ChassisStop::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:communication.ChassisStop.flag)
}

// double time = 2;
inline void ChassisStop::clear_time() {
  time_ = 0;
}
inline double ChassisStop::_internal_time() const {
  return time_;
}
inline double ChassisStop::time() const {
  // @@protoc_insertion_point(field_get:communication.ChassisStop.time)
  return _internal_time();
}
inline void ChassisStop::_internal_set_time(double value) {
  
  time_ = value;
}
inline void ChassisStop::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.ChassisStop.time)
}

// -------------------------------------------------------------------

// Shooter

// bool open = 1;
inline void Shooter::clear_open() {
  open_ = false;
}
inline bool Shooter::_internal_open() const {
  return open_;
}
inline bool Shooter::open() const {
  // @@protoc_insertion_point(field_get:communication.Shooter.open)
  return _internal_open();
}
inline void Shooter::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void Shooter::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:communication.Shooter.open)
}

// double time = 2;
inline void Shooter::clear_time() {
  time_ = 0;
}
inline double Shooter::_internal_time() const {
  return time_;
}
inline double Shooter::time() const {
  // @@protoc_insertion_point(field_get:communication.Shooter.time)
  return _internal_time();
}
inline void Shooter::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Shooter::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Shooter.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
