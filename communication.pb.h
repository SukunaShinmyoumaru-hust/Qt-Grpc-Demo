// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_communication_2eproto_metadata_getter(int index);
namespace communication {
class Affected;
struct AffectedDefaultTypeInternal;
extern AffectedDefaultTypeInternal _Affected_default_instance_;
class Ammunition;
struct AmmunitionDefaultTypeInternal;
extern AmmunitionDefaultTypeInternal _Ammunition_default_instance_;
class Blood;
struct BloodDefaultTypeInternal;
extern BloodDefaultTypeInternal _Blood_default_instance_;
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class Destination;
struct DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class FrictionWheel;
struct FrictionWheelDefaultTypeInternal;
extern FrictionWheelDefaultTypeInternal _FrictionWheel_default_instance_;
class GunPosture;
struct GunPostureDefaultTypeInternal;
extern GunPostureDefaultTypeInternal _GunPosture_default_instance_;
class ObjectDection;
struct ObjectDectionDefaultTypeInternal;
extern ObjectDectionDefaultTypeInternal _ObjectDection_default_instance_;
class Posture;
struct PostureDefaultTypeInternal;
extern PostureDefaultTypeInternal _Posture_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class Velocity;
struct VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace communication
PROTOBUF_NAMESPACE_OPEN
template<> ::communication::Affected* Arena::CreateMaybeMessage<::communication::Affected>(Arena*);
template<> ::communication::Ammunition* Arena::CreateMaybeMessage<::communication::Ammunition>(Arena*);
template<> ::communication::Blood* Arena::CreateMaybeMessage<::communication::Blood>(Arena*);
template<> ::communication::Bullet* Arena::CreateMaybeMessage<::communication::Bullet>(Arena*);
template<> ::communication::Destination* Arena::CreateMaybeMessage<::communication::Destination>(Arena*);
template<> ::communication::FrictionWheel* Arena::CreateMaybeMessage<::communication::FrictionWheel>(Arena*);
template<> ::communication::GunPosture* Arena::CreateMaybeMessage<::communication::GunPosture>(Arena*);
template<> ::communication::ObjectDection* Arena::CreateMaybeMessage<::communication::ObjectDection>(Arena*);
template<> ::communication::Posture* Arena::CreateMaybeMessage<::communication::Posture>(Arena*);
template<> ::communication::Request* Arena::CreateMaybeMessage<::communication::Request>(Arena*);
template<> ::communication::Response* Arena::CreateMaybeMessage<::communication::Response>(Arena*);
template<> ::communication::Stop* Arena::CreateMaybeMessage<::communication::Stop>(Arena*);
template<> ::communication::Velocity* Arena::CreateMaybeMessage<::communication::Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace communication {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Blood PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Blood) */ {
 public:
  inline Blood() : Blood(nullptr) {}
  virtual ~Blood();
  explicit constexpr Blood(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blood(const Blood& from);
  Blood(Blood&& from) noexcept
    : Blood() {
    *this = ::std::move(from);
  }

  inline Blood& operator=(const Blood& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blood& operator=(Blood&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blood& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blood* internal_default_instance() {
    return reinterpret_cast<const Blood*>(
               &_Blood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Blood& a, Blood& b) {
    a.Swap(&b);
  }
  inline void Swap(Blood* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blood* New() const final {
    return CreateMaybeMessage<Blood>(nullptr);
  }

  Blood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blood>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blood& from);
  void MergeFrom(const Blood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blood* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Blood";
  }
  protected:
  explicit Blood(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBloodFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // int32 blood = 1;
  void clear_blood();
  ::PROTOBUF_NAMESPACE_ID::int32 blood() const;
  void set_blood(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blood() const;
  void _internal_set_blood(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Blood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 blood_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Ammunition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Ammunition) */ {
 public:
  inline Ammunition() : Ammunition(nullptr) {}
  virtual ~Ammunition();
  explicit constexpr Ammunition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ammunition(const Ammunition& from);
  Ammunition(Ammunition&& from) noexcept
    : Ammunition() {
    *this = ::std::move(from);
  }

  inline Ammunition& operator=(const Ammunition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ammunition& operator=(Ammunition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ammunition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ammunition* internal_default_instance() {
    return reinterpret_cast<const Ammunition*>(
               &_Ammunition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ammunition& a, Ammunition& b) {
    a.Swap(&b);
  }
  inline void Swap(Ammunition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ammunition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ammunition* New() const final {
    return CreateMaybeMessage<Ammunition>(nullptr);
  }

  Ammunition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ammunition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ammunition& from);
  void MergeFrom(const Ammunition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ammunition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Ammunition";
  }
  protected:
  explicit Ammunition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmmunitionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // int32 ammunition = 1;
  void clear_ammunition();
  ::PROTOBUF_NAMESPACE_ID::int32 ammunition() const;
  void set_ammunition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ammunition() const;
  void _internal_set_ammunition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float time = 3;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Ammunition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ammunition_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Posture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Posture) */ {
 public:
  inline Posture() : Posture(nullptr) {}
  virtual ~Posture();
  explicit constexpr Posture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Posture(const Posture& from);
  Posture(Posture&& from) noexcept
    : Posture() {
    *this = ::std::move(from);
  }

  inline Posture& operator=(const Posture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Posture& operator=(Posture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Posture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Posture* internal_default_instance() {
    return reinterpret_cast<const Posture*>(
               &_Posture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Posture& a, Posture& b) {
    a.Swap(&b);
  }
  inline void Swap(Posture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Posture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Posture* New() const final {
    return CreateMaybeMessage<Posture>(nullptr);
  }

  Posture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Posture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Posture& from);
  void MergeFrom(const Posture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Posture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Posture";
  }
  protected:
  explicit Posture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kRadianFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float radian = 3;
  void clear_radian();
  float radian() const;
  void set_radian(float value);
  private:
  float _internal_radian() const;
  void _internal_set_radian(float value);
  public:

  // float time = 4;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Posture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float radian_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class GunPosture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.GunPosture) */ {
 public:
  inline GunPosture() : GunPosture(nullptr) {}
  virtual ~GunPosture();
  explicit constexpr GunPosture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GunPosture(const GunPosture& from);
  GunPosture(GunPosture&& from) noexcept
    : GunPosture() {
    *this = ::std::move(from);
  }

  inline GunPosture& operator=(const GunPosture& from) {
    CopyFrom(from);
    return *this;
  }
  inline GunPosture& operator=(GunPosture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GunPosture& default_instance() {
    return *internal_default_instance();
  }
  static inline const GunPosture* internal_default_instance() {
    return reinterpret_cast<const GunPosture*>(
               &_GunPosture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GunPosture& a, GunPosture& b) {
    a.Swap(&b);
  }
  inline void Swap(GunPosture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GunPosture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GunPosture* New() const final {
    return CreateMaybeMessage<GunPosture>(nullptr);
  }

  GunPosture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GunPosture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GunPosture& from);
  void MergeFrom(const GunPosture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GunPosture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.GunPosture";
  }
  protected:
  explicit GunPosture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadianFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // float radian = 1;
  void clear_radian();
  float radian() const;
  void set_radian(float value);
  private:
  float _internal_radian() const;
  void _internal_set_radian(float value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.GunPosture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float radian_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Velocity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Velocity) */ {
 public:
  inline Velocity() : Velocity(nullptr) {}
  virtual ~Velocity();
  explicit constexpr Velocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Velocity";
  }
  protected:
  explicit Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // float velocity = 1;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);
  private:
  float _internal_velocity() const;
  void _internal_set_velocity(float value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float velocity_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Affected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Affected) */ {
 public:
  inline Affected() : Affected(nullptr) {}
  virtual ~Affected();
  explicit constexpr Affected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Affected(const Affected& from);
  Affected(Affected&& from) noexcept
    : Affected() {
    *this = ::std::move(from);
  }

  inline Affected& operator=(const Affected& from) {
    CopyFrom(from);
    return *this;
  }
  inline Affected& operator=(Affected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Affected& default_instance() {
    return *internal_default_instance();
  }
  static inline const Affected* internal_default_instance() {
    return reinterpret_cast<const Affected*>(
               &_Affected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Affected& a, Affected& b) {
    a.Swap(&b);
  }
  inline void Swap(Affected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Affected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Affected* New() const final {
    return CreateMaybeMessage<Affected>(nullptr);
  }

  Affected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Affected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Affected& from);
  void MergeFrom(const Affected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Affected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Affected";
  }
  protected:
  explicit Affected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // int32 up = 1;
  void clear_up();
  ::PROTOBUF_NAMESPACE_ID::int32 up() const;
  void set_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up() const;
  void _internal_set_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down = 2;
  void clear_down();
  ::PROTOBUF_NAMESPACE_ID::int32 down() const;
  void set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down() const;
  void _internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left = 3;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right = 4;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float time = 5;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Affected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ObjectDection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.ObjectDection) */ {
 public:
  inline ObjectDection() : ObjectDection(nullptr) {}
  virtual ~ObjectDection();
  explicit constexpr ObjectDection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDection(const ObjectDection& from);
  ObjectDection(ObjectDection&& from) noexcept
    : ObjectDection() {
    *this = ::std::move(from);
  }

  inline ObjectDection& operator=(const ObjectDection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDection& operator=(ObjectDection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDection* internal_default_instance() {
    return reinterpret_cast<const ObjectDection*>(
               &_ObjectDection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectDection& a, ObjectDection& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectDection* New() const final {
    return CreateMaybeMessage<ObjectDection>(nullptr);
  }

  ObjectDection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDection& from);
  void MergeFrom(const ObjectDection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.ObjectDection";
  }
  protected:
  explicit ObjectDection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // repeated float x1 = 1;
  int x1_size() const;
  private:
  int _internal_x1_size() const;
  public:
  void clear_x1();
  private:
  float _internal_x1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x1() const;
  void _internal_add_x1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x1();
  public:
  float x1(int index) const;
  void set_x1(int index, float value);
  void add_x1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x1();

  // repeated float y1 = 2;
  int y1_size() const;
  private:
  int _internal_y1_size() const;
  public:
  void clear_y1();
  private:
  float _internal_y1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y1() const;
  void _internal_add_y1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y1();
  public:
  float y1(int index) const;
  void set_y1(int index, float value);
  void add_y1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y1();

  // repeated float x2 = 3;
  int x2_size() const;
  private:
  int _internal_x2_size() const;
  public:
  void clear_x2();
  private:
  float _internal_x2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x2() const;
  void _internal_add_x2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x2();
  public:
  float x2(int index) const;
  void set_x2(int index, float value);
  void add_x2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x2();

  // repeated float y2 = 4;
  int y2_size() const;
  private:
  int _internal_y2_size() const;
  public:
  void clear_y2();
  private:
  float _internal_y2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y2() const;
  void _internal_add_y2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y2();
  public:
  float y2(int index) const;
  void set_y2(int index, float value);
  void add_y2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y2();

  // float time = 5;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.ObjectDection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x1_;
  mutable std::atomic<int> _x1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y1_;
  mutable std::atomic<int> _y1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x2_;
  mutable std::atomic<int> _x2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y2_;
  mutable std::atomic<int> _y2_cached_byte_size_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Destination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Destination) */ {
 public:
  inline Destination() : Destination(nullptr) {}
  virtual ~Destination();
  explicit constexpr Destination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Destination(const Destination& from);
  Destination(Destination&& from) noexcept
    : Destination() {
    *this = ::std::move(from);
  }

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Destination& operator=(Destination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Destination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
               &_Destination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Destination& a, Destination& b) {
    a.Swap(&b);
  }
  inline void Swap(Destination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Destination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Destination* New() const final {
    return CreateMaybeMessage<Destination>(nullptr);
  }

  Destination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Destination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Destination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Destination";
  }
  protected:
  explicit Destination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float time = 3;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Destination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class FrictionWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.FrictionWheel) */ {
 public:
  inline FrictionWheel() : FrictionWheel(nullptr) {}
  virtual ~FrictionWheel();
  explicit constexpr FrictionWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrictionWheel(const FrictionWheel& from);
  FrictionWheel(FrictionWheel&& from) noexcept
    : FrictionWheel() {
    *this = ::std::move(from);
  }

  inline FrictionWheel& operator=(const FrictionWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrictionWheel& operator=(FrictionWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrictionWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrictionWheel* internal_default_instance() {
    return reinterpret_cast<const FrictionWheel*>(
               &_FrictionWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FrictionWheel& a, FrictionWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(FrictionWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrictionWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrictionWheel* New() const final {
    return CreateMaybeMessage<FrictionWheel>(nullptr);
  }

  FrictionWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrictionWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrictionWheel& from);
  void MergeFrom(const FrictionWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrictionWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.FrictionWheel";
  }
  protected:
  explicit FrictionWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.FrictionWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool flag_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool flag_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Bullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:communication.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  virtual ~Bullet();
  explicit constexpr Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(nullptr);
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "communication.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_communication_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // float time = 2;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:communication.Bullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool flag_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// float time = 1;
inline void Request::clear_time() {
  time_ = 0;
}
inline float Request::_internal_time() const {
  return time_;
}
inline float Request::time() const {
  // @@protoc_insertion_point(field_get:communication.Request.time)
  return _internal_time();
}
inline void Request::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Request::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Request.time)
}

// -------------------------------------------------------------------

// Blood

// int32 blood = 1;
inline void Blood::clear_blood() {
  blood_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blood::_internal_blood() const {
  return blood_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blood::blood() const {
  // @@protoc_insertion_point(field_get:communication.Blood.blood)
  return _internal_blood();
}
inline void Blood::_internal_set_blood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blood_ = value;
}
inline void Blood::set_blood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blood(value);
  // @@protoc_insertion_point(field_set:communication.Blood.blood)
}

// float time = 2;
inline void Blood::clear_time() {
  time_ = 0;
}
inline float Blood::_internal_time() const {
  return time_;
}
inline float Blood::time() const {
  // @@protoc_insertion_point(field_get:communication.Blood.time)
  return _internal_time();
}
inline void Blood::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Blood::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Blood.time)
}

// -------------------------------------------------------------------

// Ammunition

// int32 ammunition = 1;
inline void Ammunition::clear_ammunition() {
  ammunition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ammunition::_internal_ammunition() const {
  return ammunition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ammunition::ammunition() const {
  // @@protoc_insertion_point(field_get:communication.Ammunition.ammunition)
  return _internal_ammunition();
}
inline void Ammunition::_internal_set_ammunition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ammunition_ = value;
}
inline void Ammunition::set_ammunition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ammunition(value);
  // @@protoc_insertion_point(field_set:communication.Ammunition.ammunition)
}

// int32 type = 2;
inline void Ammunition::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ammunition::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ammunition::type() const {
  // @@protoc_insertion_point(field_get:communication.Ammunition.type)
  return _internal_type();
}
inline void Ammunition::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Ammunition::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:communication.Ammunition.type)
}

// float time = 3;
inline void Ammunition::clear_time() {
  time_ = 0;
}
inline float Ammunition::_internal_time() const {
  return time_;
}
inline float Ammunition::time() const {
  // @@protoc_insertion_point(field_get:communication.Ammunition.time)
  return _internal_time();
}
inline void Ammunition::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Ammunition::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Ammunition.time)
}

// -------------------------------------------------------------------

// Posture

// float x = 1;
inline void Posture::clear_x() {
  x_ = 0;
}
inline float Posture::_internal_x() const {
  return x_;
}
inline float Posture::x() const {
  // @@protoc_insertion_point(field_get:communication.Posture.x)
  return _internal_x();
}
inline void Posture::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Posture::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:communication.Posture.x)
}

// float y = 2;
inline void Posture::clear_y() {
  y_ = 0;
}
inline float Posture::_internal_y() const {
  return y_;
}
inline float Posture::y() const {
  // @@protoc_insertion_point(field_get:communication.Posture.y)
  return _internal_y();
}
inline void Posture::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Posture::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:communication.Posture.y)
}

// float radian = 3;
inline void Posture::clear_radian() {
  radian_ = 0;
}
inline float Posture::_internal_radian() const {
  return radian_;
}
inline float Posture::radian() const {
  // @@protoc_insertion_point(field_get:communication.Posture.radian)
  return _internal_radian();
}
inline void Posture::_internal_set_radian(float value) {
  
  radian_ = value;
}
inline void Posture::set_radian(float value) {
  _internal_set_radian(value);
  // @@protoc_insertion_point(field_set:communication.Posture.radian)
}

// float time = 4;
inline void Posture::clear_time() {
  time_ = 0;
}
inline float Posture::_internal_time() const {
  return time_;
}
inline float Posture::time() const {
  // @@protoc_insertion_point(field_get:communication.Posture.time)
  return _internal_time();
}
inline void Posture::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Posture::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Posture.time)
}

// -------------------------------------------------------------------

// GunPosture

// float radian = 1;
inline void GunPosture::clear_radian() {
  radian_ = 0;
}
inline float GunPosture::_internal_radian() const {
  return radian_;
}
inline float GunPosture::radian() const {
  // @@protoc_insertion_point(field_get:communication.GunPosture.radian)
  return _internal_radian();
}
inline void GunPosture::_internal_set_radian(float value) {
  
  radian_ = value;
}
inline void GunPosture::set_radian(float value) {
  _internal_set_radian(value);
  // @@protoc_insertion_point(field_set:communication.GunPosture.radian)
}

// float time = 2;
inline void GunPosture::clear_time() {
  time_ = 0;
}
inline float GunPosture::_internal_time() const {
  return time_;
}
inline float GunPosture::time() const {
  // @@protoc_insertion_point(field_get:communication.GunPosture.time)
  return _internal_time();
}
inline void GunPosture::_internal_set_time(float value) {
  
  time_ = value;
}
inline void GunPosture::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.GunPosture.time)
}

// -------------------------------------------------------------------

// Velocity

// float velocity = 1;
inline void Velocity::clear_velocity() {
  velocity_ = 0;
}
inline float Velocity::_internal_velocity() const {
  return velocity_;
}
inline float Velocity::velocity() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.velocity)
  return _internal_velocity();
}
inline void Velocity::_internal_set_velocity(float value) {
  
  velocity_ = value;
}
inline void Velocity::set_velocity(float value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.velocity)
}

// float time = 2;
inline void Velocity::clear_time() {
  time_ = 0;
}
inline float Velocity::_internal_time() const {
  return time_;
}
inline float Velocity::time() const {
  // @@protoc_insertion_point(field_get:communication.Velocity.time)
  return _internal_time();
}
inline void Velocity::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Velocity::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Velocity.time)
}

// -------------------------------------------------------------------

// Affected

// int32 up = 1;
inline void Affected::clear_up() {
  up_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::_internal_up() const {
  return up_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::up() const {
  // @@protoc_insertion_point(field_get:communication.Affected.up)
  return _internal_up();
}
inline void Affected::_internal_set_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_ = value;
}
inline void Affected::set_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:communication.Affected.up)
}

// int32 down = 2;
inline void Affected::clear_down() {
  down_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::_internal_down() const {
  return down_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::down() const {
  // @@protoc_insertion_point(field_get:communication.Affected.down)
  return _internal_down();
}
inline void Affected::_internal_set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_ = value;
}
inline void Affected::set_down(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:communication.Affected.down)
}

// int32 left = 3;
inline void Affected::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::left() const {
  // @@protoc_insertion_point(field_get:communication.Affected.left)
  return _internal_left();
}
inline void Affected::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
}
inline void Affected::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:communication.Affected.left)
}

// int32 right = 4;
inline void Affected::clear_right() {
  right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Affected::right() const {
  // @@protoc_insertion_point(field_get:communication.Affected.right)
  return _internal_right();
}
inline void Affected::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_ = value;
}
inline void Affected::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:communication.Affected.right)
}

// float time = 5;
inline void Affected::clear_time() {
  time_ = 0;
}
inline float Affected::_internal_time() const {
  return time_;
}
inline float Affected::time() const {
  // @@protoc_insertion_point(field_get:communication.Affected.time)
  return _internal_time();
}
inline void Affected::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Affected::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Affected.time)
}

// -------------------------------------------------------------------

// ObjectDection

// repeated float x1 = 1;
inline int ObjectDection::_internal_x1_size() const {
  return x1_.size();
}
inline int ObjectDection::x1_size() const {
  return _internal_x1_size();
}
inline void ObjectDection::clear_x1() {
  x1_.Clear();
}
inline float ObjectDection::_internal_x1(int index) const {
  return x1_.Get(index);
}
inline float ObjectDection::x1(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.x1)
  return _internal_x1(index);
}
inline void ObjectDection::set_x1(int index, float value) {
  x1_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.x1)
}
inline void ObjectDection::_internal_add_x1(float value) {
  x1_.Add(value);
}
inline void ObjectDection::add_x1(float value) {
  _internal_add_x1(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.x1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_x1() const {
  return x1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::x1() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.x1)
  return _internal_x1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_x1() {
  return &x1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_x1() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.x1)
  return _internal_mutable_x1();
}

// repeated float y1 = 2;
inline int ObjectDection::_internal_y1_size() const {
  return y1_.size();
}
inline int ObjectDection::y1_size() const {
  return _internal_y1_size();
}
inline void ObjectDection::clear_y1() {
  y1_.Clear();
}
inline float ObjectDection::_internal_y1(int index) const {
  return y1_.Get(index);
}
inline float ObjectDection::y1(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.y1)
  return _internal_y1(index);
}
inline void ObjectDection::set_y1(int index, float value) {
  y1_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.y1)
}
inline void ObjectDection::_internal_add_y1(float value) {
  y1_.Add(value);
}
inline void ObjectDection::add_y1(float value) {
  _internal_add_y1(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.y1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_y1() const {
  return y1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::y1() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.y1)
  return _internal_y1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_y1() {
  return &y1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_y1() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.y1)
  return _internal_mutable_y1();
}

// repeated float x2 = 3;
inline int ObjectDection::_internal_x2_size() const {
  return x2_.size();
}
inline int ObjectDection::x2_size() const {
  return _internal_x2_size();
}
inline void ObjectDection::clear_x2() {
  x2_.Clear();
}
inline float ObjectDection::_internal_x2(int index) const {
  return x2_.Get(index);
}
inline float ObjectDection::x2(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.x2)
  return _internal_x2(index);
}
inline void ObjectDection::set_x2(int index, float value) {
  x2_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.x2)
}
inline void ObjectDection::_internal_add_x2(float value) {
  x2_.Add(value);
}
inline void ObjectDection::add_x2(float value) {
  _internal_add_x2(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.x2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_x2() const {
  return x2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::x2() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.x2)
  return _internal_x2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_x2() {
  return &x2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_x2() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.x2)
  return _internal_mutable_x2();
}

// repeated float y2 = 4;
inline int ObjectDection::_internal_y2_size() const {
  return y2_.size();
}
inline int ObjectDection::y2_size() const {
  return _internal_y2_size();
}
inline void ObjectDection::clear_y2() {
  y2_.Clear();
}
inline float ObjectDection::_internal_y2(int index) const {
  return y2_.Get(index);
}
inline float ObjectDection::y2(int index) const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.y2)
  return _internal_y2(index);
}
inline void ObjectDection::set_y2(int index, float value) {
  y2_.Set(index, value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.y2)
}
inline void ObjectDection::_internal_add_y2(float value) {
  y2_.Add(value);
}
inline void ObjectDection::add_y2(float value) {
  _internal_add_y2(value);
  // @@protoc_insertion_point(field_add:communication.ObjectDection.y2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::_internal_y2() const {
  return y2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectDection::y2() const {
  // @@protoc_insertion_point(field_list:communication.ObjectDection.y2)
  return _internal_y2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::_internal_mutable_y2() {
  return &y2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectDection::mutable_y2() {
  // @@protoc_insertion_point(field_mutable_list:communication.ObjectDection.y2)
  return _internal_mutable_y2();
}

// float time = 5;
inline void ObjectDection::clear_time() {
  time_ = 0;
}
inline float ObjectDection::_internal_time() const {
  return time_;
}
inline float ObjectDection::time() const {
  // @@protoc_insertion_point(field_get:communication.ObjectDection.time)
  return _internal_time();
}
inline void ObjectDection::_internal_set_time(float value) {
  
  time_ = value;
}
inline void ObjectDection::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.ObjectDection.time)
}

// -------------------------------------------------------------------

// Response

// float time = 1;
inline void Response::clear_time() {
  time_ = 0;
}
inline float Response::_internal_time() const {
  return time_;
}
inline float Response::time() const {
  // @@protoc_insertion_point(field_get:communication.Response.time)
  return _internal_time();
}
inline void Response::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Response::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Response.time)
}

// -------------------------------------------------------------------

// Destination

// float x = 1;
inline void Destination::clear_x() {
  x_ = 0;
}
inline float Destination::_internal_x() const {
  return x_;
}
inline float Destination::x() const {
  // @@protoc_insertion_point(field_get:communication.Destination.x)
  return _internal_x();
}
inline void Destination::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Destination::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:communication.Destination.x)
}

// float y = 2;
inline void Destination::clear_y() {
  y_ = 0;
}
inline float Destination::_internal_y() const {
  return y_;
}
inline float Destination::y() const {
  // @@protoc_insertion_point(field_get:communication.Destination.y)
  return _internal_y();
}
inline void Destination::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Destination::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:communication.Destination.y)
}

// float time = 3;
inline void Destination::clear_time() {
  time_ = 0;
}
inline float Destination::_internal_time() const {
  return time_;
}
inline float Destination::time() const {
  // @@protoc_insertion_point(field_get:communication.Destination.time)
  return _internal_time();
}
inline void Destination::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Destination::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Destination.time)
}

// -------------------------------------------------------------------

// FrictionWheel

// bool flag = 1;
inline void FrictionWheel::clear_flag() {
  flag_ = false;
}
inline bool FrictionWheel::_internal_flag() const {
  return flag_;
}
inline bool FrictionWheel::flag() const {
  // @@protoc_insertion_point(field_get:communication.FrictionWheel.flag)
  return _internal_flag();
}
inline void FrictionWheel::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrictionWheel::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:communication.FrictionWheel.flag)
}

// float time = 2;
inline void FrictionWheel::clear_time() {
  time_ = 0;
}
inline float FrictionWheel::_internal_time() const {
  return time_;
}
inline float FrictionWheel::time() const {
  // @@protoc_insertion_point(field_get:communication.FrictionWheel.time)
  return _internal_time();
}
inline void FrictionWheel::_internal_set_time(float value) {
  
  time_ = value;
}
inline void FrictionWheel::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.FrictionWheel.time)
}

// -------------------------------------------------------------------

// Stop

// bool flag = 1;
inline void Stop::clear_flag() {
  flag_ = false;
}
inline bool Stop::_internal_flag() const {
  return flag_;
}
inline bool Stop::flag() const {
  // @@protoc_insertion_point(field_get:communication.Stop.flag)
  return _internal_flag();
}
inline void Stop::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void Stop::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:communication.Stop.flag)
}

// float time = 2;
inline void Stop::clear_time() {
  time_ = 0;
}
inline float Stop::_internal_time() const {
  return time_;
}
inline float Stop::time() const {
  // @@protoc_insertion_point(field_get:communication.Stop.time)
  return _internal_time();
}
inline void Stop::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Stop::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Stop.time)
}

// -------------------------------------------------------------------

// Bullet

// bool flag = 1;
inline void Bullet::clear_flag() {
  flag_ = false;
}
inline bool Bullet::_internal_flag() const {
  return flag_;
}
inline bool Bullet::flag() const {
  // @@protoc_insertion_point(field_get:communication.Bullet.flag)
  return _internal_flag();
}
inline void Bullet::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void Bullet::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:communication.Bullet.flag)
}

// float time = 2;
inline void Bullet::clear_time() {
  time_ = 0;
}
inline float Bullet::_internal_time() const {
  return time_;
}
inline float Bullet::time() const {
  // @@protoc_insertion_point(field_get:communication.Bullet.time)
  return _internal_time();
}
inline void Bullet::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Bullet::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:communication.Bullet.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
